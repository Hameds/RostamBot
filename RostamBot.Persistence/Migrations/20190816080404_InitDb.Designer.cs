// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RostamBot.Persistence;

namespace RostamBot.Persistence.Migrations
{
    [DbContext(typeof(RostamBotDbContext))]
    [Migration("20190816080404_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.Moderator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TwitterScreenName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<long>("TwitterUserId");

                    b.HasKey("Id");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.Reporter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TwitterScreenName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<long>("TwitterUserId");

                    b.HasKey("Id");

                    b.ToTable("Reporters");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.Supervision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ModeratorId");

                    b.Property<bool?>("ShouldBlock");

                    b.Property<Guid>("SuspiciousAccountId");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("SuspiciousAccountId");

                    b.ToTable("Supervisions");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspiciousAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("ShouldBlock");

                    b.Property<DateTime>("TwitterJoinDate");

                    b.Property<string>("TwitterScreenName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<long>("TwitterUserId");

                    b.HasKey("Id");

                    b.ToTable("SuspiciousAccounts");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspiciousAccountReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ReportDate");

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid>("SuspiciousAccountId");

                    b.Property<string>("TweetContent")
                        .IsRequired();

                    b.Property<long>("TweetId");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SuspiciousAccountId");

                    b.ToTable("SuspiciousAccountReports");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspiciousTweet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ReporterId");

                    b.Property<Guid>("SuspiciousAccountId");

                    b.Property<string>("TweetContent")
                        .IsRequired();

                    b.Property<long>("TweetId");

                    b.HasKey("Id");

                    b.HasIndex("ReporterId");

                    b.HasIndex("SuspiciousAccountId");

                    b.ToTable("SuspiciousTweets");
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspicousAccountBlockHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ActionDate");

                    b.Property<bool>("IsBlocked");

                    b.Property<Guid>("SuspiciousAccountId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SuspiciousAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("SuspicousAccountBlockHistories");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RostamBot.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.Supervision", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.Moderator", "Moderator")
                        .WithMany("Supervisions")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RostamBot.Domain.Entities.SuspiciousAccount", "SuspiciousAccount")
                        .WithMany("Supervisions")
                        .HasForeignKey("SuspiciousAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspiciousAccountReport", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.Reporter", "Reporter")
                        .WithMany("SuspiciousAccountReports")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RostamBot.Domain.Entities.SuspiciousAccount", "SuspiciousAccount")
                        .WithMany("SuspiciousAccountReports")
                        .HasForeignKey("SuspiciousAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspiciousTweet", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.Reporter", "Reporter")
                        .WithMany("SuspiciousTweets")
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RostamBot.Domain.Entities.SuspiciousAccount", "SuspiciousAccount")
                        .WithMany("SuspiciousTweets")
                        .HasForeignKey("SuspiciousAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RostamBot.Domain.Entities.SuspicousAccountBlockHistory", b =>
                {
                    b.HasOne("RostamBot.Domain.Entities.SuspiciousAccount", "SuspiciousAccount")
                        .WithMany("SuspicousAccountBlockHistories")
                        .HasForeignKey("SuspiciousAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RostamBot.Domain.Entities.ApplicationUser", "User")
                        .WithMany("SuspicousAccountBlockHistories")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
